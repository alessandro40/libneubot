//
// LibNeubot interface - Public domain.
// WARNING: Autogenerated file - do not edit!
//
public class LibNeubot {

    // Structs:

    //struct NeubotEchoServer;
    //struct NeubotHttpClient;
    //struct NeubotPollable;
    //struct NeubotPoller;

    // 
    // Note: in the following there is a number of functions
    // that in C receive an opaque object and one or more
    // callback functions; i.e., the callbacks are, in a sense,
    // bound to the opaque object.
    // 
    // Because Java does not allow you to take the address of
    // a function, from Java to C we do not pass the callbacks,
    // rather we pass their names. Also, the bound opaque object
    // must be a Java object, and the passed names must refer
    // to methods of such Java object.
    // 
    // Also, note that we pass around C opaque objects (i.e.,
    // address of structures) using the jlong type.
    // 

    // NeubotEchoServer API:

    public final static native long NeubotEchoServer_construct(long poller, 
        int use_ipv6, String address, String port);

    // NeubotHttpClient API:

    public final static native long NeubotHttpClient_construct(long poller, 
        String handle_begin, String handle_body, String handle_close, 
        String handle_connect, String handle_end, String handle_flush, 
        String handle_headers, long opaque);

    public final static native int NeubotHttpClient_connect(long self, 
        String family, String address, String port);

    public final static native int NeubotHttpClient_write(long self, 
        String data, size_t count);

    public final static native int NeubotHttpClient_writes(long self, 
        String str);

    public final static native int NeubotHttpClient_flush(long self);

    public final static native int NeubotHttpClient_code(long self);

    public final static native String NeubotHttpClient_reason(long self);

    public final static native String NeubotHttpClient_header(long self, 
        String key);

    public final static native size_t NeubotHttpClient_body_length(
        long self);

    public final static native String NeubotHttpClient_body_string(
        long self);

    public final static native void NeubotHttpClient_close(long self);

    // NeubotPollable API:

    public final static native long NeubotPollable_construct(long poller, 
        String handle_read, String handle_write, String handle_close, 
        long opaque);

    public final static native int NeubotPollable_attach(long self, 
        long filenum);

    public final static native void NeubotPollable_detach(long self);

    public final static native long NeubotPollable_fileno(long self);

    public final static native int NeubotPollable_set_readable(long self);

    public final static native int NeubotPollable_unset_readable(long self);

    public final static native int NeubotPollable_set_writable(long self);

    public final static native int NeubotPollable_unset_writable(long self);

    public final static native void NeubotPollable_set_timeout(long self, 
        double delta);

    public final static native void NeubotPollable_clear_timeout(long self);

    public final static native void NeubotPollable_close(long self);

    // NeubotPoller API:

    public final static native long NeubotPoller_construct();

    public final static native int NeubotPoller_sched(long self, 
        double delta, String callback, long opaque);

    public final static native int NeubotPoller_defer_read(long self, 
        long fileno, String handle_ok, String handle_timeout, 
        long opaque, double timeout);

    public final static native int NeubotPoller_defer_write(long self, 
        long fileno, String handle_ok, String handle_timeout, 
        long opaque, double timeout);

    public final static native int NeubotPoller_resolve(long self, 
        int use_ipv6, String name, String callback, long opaque);

    public final static native void NeubotPoller_loop(long self);

    public final static native void NeubotPoller_break_loop(long self);

};
