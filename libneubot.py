#
# LibNeubot interface - Public domain.
# WARNING: Autogenerated file - do not edit!
#

import ctypes

LIBNEUBOT_OBJECTS = set()

NEUBOT_SLOT_VO = ctypes.CFUNCTYPE(None, ctypes.py_object)

class EchoServer(object):

    def __init__(self, poller, use_ipv6, address, port):
        self._context = LIBNEUBOT.NeubotEchoServer_construct(poller._context,
          use_ipv6, address, port)
        if not self._context:
            raise RuntimeError('out of memory')
        LIBNEUBOT_OBJECTS.add(self)

class Pollable(object):

    def handle_read(void):
        pass

    def handle_write(void):
        pass

    def handle_close(void):
        pass

    def __init__(self, poller):
        self._c_obj = ctypes.py_object(self)
        self._c_handle_read = NEUBOT_SLOT_VO(self.handle_read)
        self._c_handle_write = NEUBOT_SLOT_VO(self.handle_write)
        self._c_handle_close = NEUBOT_SLOT_VO(self.handle_close)
        self._context = LIBNEUBOT.NeubotPollable_construct(poller._context,
          self._c_handle_read, self._c_handle_write, self._c_handle_close,
          self._c_self)
        if not self._context:
            raise RuntimeError('out of memory')
        LIBNEUBOT_OBJECTS.add(self)

    def attach(self, filenum):
        retval = LIBNEUBOT.NeubotPollable_attach(self._context, filenum)
        if retval != 0:
            raise RuntimeError('attach failed')
        return retval

    def detach(self):
        LIBNEUBOT.NeubotPollable_detach(self._context)

    def fileno(self):
        retval = LIBNEUBOT.NeubotPollable_fileno(self._context)
        return retval

    def set_readable(self):
        retval = LIBNEUBOT.NeubotPollable_set_readable(self._context)
        if retval != 0:
            raise RuntimeError('set_readable failed')
        return retval

    def unset_readable(self):
        retval = LIBNEUBOT.NeubotPollable_unset_readable(self._context)
        if retval != 0:
            raise RuntimeError('unset_readable failed')
        return retval

    def set_writable(self):
        retval = LIBNEUBOT.NeubotPollable_set_writable(self._context)
        if retval != 0:
            raise RuntimeError('set_writable failed')
        return retval

    def unset_writable(self):
        retval = LIBNEUBOT.NeubotPollable_unset_writable(self._context)
        if retval != 0:
            raise RuntimeError('unset_writable failed')
        return retval

    def set_timeout(self, delta):
        LIBNEUBOT.NeubotPollable_set_timeout(self._context, delta)

    def clear_timeout(self):
        LIBNEUBOT.NeubotPollable_clear_timeout(self._context)

    def close(self):
        LIBNEUBOT.NeubotPollable_close(self._context)
        LIBNEUBOT_OBJECTS.remove(self)

class Poller(object):

    def __init__(self):
        self._context = LIBNEUBOT.NeubotPoller_construct()
        if not self._context:
            raise RuntimeError('out of memory')
        LIBNEUBOT_OBJECTS.add(self)

    def sched(self, delta, callback, opaque):
        retval = LIBNEUBOT.NeubotPoller_sched(self._context, delta, callback,
          opaque)
        if retval != 0:
            raise RuntimeError('sched failed')
        return retval

    def defer_read(self, fileno, handle_ok, handle_timeout, opaque, timeout):
        retval = LIBNEUBOT.NeubotPoller_defer_read(self._context, fileno,
          handle_ok, handle_timeout, opaque, timeout)
        if retval != 0:
            raise RuntimeError('defer_read failed')
        return retval

    def defer_write(self, fileno, handle_ok, handle_timeout, opaque,
          timeout):
        retval = LIBNEUBOT.NeubotPoller_defer_write(self._context, fileno,
          handle_ok, handle_timeout, opaque, timeout)
        if retval != 0:
            raise RuntimeError('defer_write failed')
        return retval

    def resolve(self, use_ipv6, name, callback, opaque):
        retval = LIBNEUBOT.NeubotPoller_resolve(self._context, use_ipv6, name,
          callback, opaque)
        if retval != 0:
            raise RuntimeError('resolve failed')
        return retval

    def loop(self):
        LIBNEUBOT.NeubotPoller_loop(self._context)

    def break_loop(self):
        LIBNEUBOT.NeubotPoller_break_loop(self._context)

