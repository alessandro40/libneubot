#!/usr/bin/env python

#
# Copyright (c) 2013
#     Nexa Center for Internet & Society, Politecnico di Torino (DAUIN)
#     and Simone Basso <bassosimone@gmail.com>.
#
# This file is part of Neubot <http://www.neubot.org/>.
#
# Neubot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Neubot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Neubot.  If not, see <http://www.gnu.org/licenses/>.
#

# pylint: disable = C0111

import json
import sys

def clang_type(types, name):
    return types.get(name, name)

def gen_c_func(stream, types, retval_type, func_name, meth_args):
    stream.write("%s " % clang_type(types, retval_type))
    stream.write("%s(" % func_name)
    if meth_args:
        for index, meth_arg in enumerate(meth_args):
            stream.write("%s" % clang_type(types, meth_arg[0]))
            if index < len(meth_args) -1:
                stream.write(", ")
    else:
        stream.write("void")
    stream.write(");\n")

def gen_c_init(stream, types, class_name, init_args):
    gen_c_func(
               stream,
               types,
               class_name + "_p",
               class_name + "_construct",
               init_args
              )

def gen_c_slot(stream, types, class_name, slot_name):
    gen_c_func(
               stream,
               types,
               "void",
               class_name + "_set_%s_slot" % slot_name,
               [
                (class_name + "_p", "self"),
                ("neubot_slot_t", "slot"),
                ("void_p", "opaque")
               ]
              )

def gen_c_del(stream, types, class_name):
    gen_c_func(
               stream,
               types,
               "void",
               class_name + "_free",
               [
                (class_name + "_p", "self")
               ]
              )

def gen_c_method(stream, types, class_name, retval_type,
                      meth_name, meth_args):
    meth_args.insert(0, (class_name + "_p", "self"))
    gen_c_func(
               stream,
               types,
               retval_type,
               class_name + "_" + meth_name,
               meth_args
              )

def main():
    path = sys.argv[1]
    filep = open(path, "r")
    interface = json.load(filep)
    stream = sys.stdout

    stream.write("/*\n")
    stream.write(" * LibNeubot interface - Public domain.\n")
    stream.write(" * WARNING: Autogenerated file - do not edit!\n")
    stream.write(" */\n")
    stream.write("\n")

    stream.write("#ifdef __cplusplus\n")
    stream.write("extern \"C\" {\n")
    stream.write("#endif\n")
    stream.write("\n")

    stream.write("typedef void (*neubot_slot_t)(void *);\n")
    stream.write("\n")

    types = {
        "Object": "void *",
        "cstring": "const char *",
        "status_t": "int",
        "void_p": "void *",
    }

    for class_name in sorted(interface["classes"]):
        stream.write("struct %s;\n" % class_name)
        types[class_name + "_p"] = "struct " + class_name + " *"
        types[class_name] = "struct " + class_name

    stream.write("\n")

    for class_name in sorted(interface["classes"]):
        for method_info in interface["classes"][class_name]:
            if method_info[0] == "__construct__":
                gen_c_init(stream, types, class_name, method_info[1:])
            elif method_info[0] == "__slot__":
                gen_c_slot(stream, types, class_name, method_info[1])
            elif method_info[0] == "__destroy__":
                gen_c_del(stream, types, class_name)
            else:
                gen_c_method(stream, types, class_name, method_info[0],
                  method_info[1], method_info[2:])
        stream.write("\n")

    stream.write("#ifdef __cplusplus\n")
    stream.write("}\n")
    stream.write("#endif\n")

if __name__ == "__main__":
    main()
