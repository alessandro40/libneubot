LibNeubot 3.1.0 [2014-05-??]
	* Add the NeubotConnection module, that provides an abstraction,
	  representing a stream-like network connection. This module provides
	  various static constructors, which allow the user to establish a
	  connection providing different parameters: connect(), 
	  connect_hostname() and attach(). This module provides also different
	  methods to read and write data over the connection.
	* Related to the previous change: add the StringVector module, useful
	  to implement connect_hostname() static constructor.
	* Related to the previous change: the protocol family of the connection
	  can be either IPv4 or IPv6 and, if unspecified, the priority can be
	  given to both of them.
	* Rewrite the C++-to-C glue code: the wrapper struct inherits from a
	  another struct (with some private methods and attributes), instead of 
	  a class.
	* Improvements in gen_python, which now supports static constructors
	  (which have to be explicitly declared in libneubot.json).
	  Additionally, if a class has a getter method of an object passed as a
	  parameter to the constructor, the getter returns it, instead of
	  calling the wrapper function.
	* Add tests for the NeubotStringVector and the NeubotConnection modules.
	* Related to the previous change: test/self_connection.py uses
	  NeubotConnection::foo_readbuf() methods, which write data directly to
	  the read_buffer, allowing tests without a real connection.
LibNeubot 3.0.0 [2014-05-04]
	* Rewrite NeubotPollable now that I know that, in C++, a structure can
	  inherit from a class. As a result, the FooState structure is now gone
	  and the API now looks like v1.0 again. That is, again the poller is
	  passed to the Pollable constructor, not to init().
	* Related to the previous change: clarified that the Pollable main
	  purpose is to allow experiments in which Neubot uses LibNeubot.
	* Related to the previous change: crank major (we're now at API 3.0).
	* Take advantage of the API 3.0 cranking and install the headers
	  at a different location (<neubot.h> becomes <libneubot/neubot.h>).
	* Add (but do not use yet) joyent/http-parser as submodule.
	* Update the OpenBSD port and fix the code accordingly (mainly cases
	  in which mixed libevent 1.4 and 2.0 headers were being used).
	* Related to the previous change: update README to better clarify
	  which are the dependencies.
	* Deprecate gen_cxx and neubot.hh, now that it's clear that the code
	  will be written in C++ to ease the interaction with SWIG.
	* Move testing code in `test/`.
	* Significant improvements in gen_python, which now enforces the
	  type safety (i.e., you can only pass to Pollable_foo() an instance
	  of the Python Pollable class), and in general produces much
	  less bloated and more pythonic Python code.
	* Related to the previous change: half of the unit test is now gone
	  because it was not typesafe (we passed integers to functions in
	  hope that they were pointer to the right C/C++ objects).
	* More minor changes, fixes and tweaks.
LibNeubot 2.0.0 [2014-04-11]
	* Add Android.mk to compile a static library for Android
	* Remove the unused LibNeubot.java/gen_java thing
	* Reimplement NeubotPollable using C++ and write C wrappers to
	  provide a similar API (however, the arguments of the constructor
	  and of attach() were changed, hence the API bump)
	* Move Java code that was autogenerated with SWIG into the
	  neubot/neubot_android repository
	* Make sure gen_cxx generates code that works on Android: correct
	  the order of the generated classes, replace the nonworking cast with
          the invocation of the ->pointer() method
	* Unify gen_py/gen_python and libneubot.py/libneubot1.py: now
	  gen_python generates a libneubot.py file that contains the old
	  stuff plus the stuff that was in libneubot1.py, moreover, the
	  gen_py script and libneubot1.py were removed
	* Regen libneubot_python
	* Make sure shared C functions (e.g., log.h and utils.h) are
	  correctly exported to C++
	* While bumping the API, unbreak the resolve() API
	* While touching the Pollable, reimplement timeouts using
	  the support provided by libevent
	* Realize that the destruction of objects must flow from the
	  derived classes to the base classes (as C++ does) not the
	  other way round (as PyNeubot does)
	* Add some defines needed to compile on Android
	* Export the logs to the logcat to ease the debugging

LibNeubot 1.0.1 [2014-02-18]
	* Tweak gen_cxx to generate code that SWIG can handle
	* Use SWIG to generate Java and Python wrappers

LibNeubot 1.0.0 [2013-12-15]
	* Return status_t in NeubotPoller_defer_{read,write}
	* Pass opaque, not pollable, to NeubotPollable callbacks
	* libneubot.json: Add and use hooks, slots and __destructor__
	* Add easier-to-use libneubot1.py wrappers
	* Add neubot.hh, wrappers for C++

LibNeubot 0.1.0 [2013-12-12]
	* Initial release
